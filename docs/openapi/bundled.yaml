openapi: 3.1.0
info:
  version: 1.0.0
  title: SENG 499 Company 1 API
  termsOfService: https://example.com/terms/
  contact:
    email: contact@example.com
    url: http://example.com/contact
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://redocly.github.io/openapi-template/logo.png
  description: |
    This site documents SENG 499 Company 1's API.  
tags:
  - name: Professors
    description: Operations about professors.
  - name: Courses
    description: Operations about courses.
  - name: Admins
    description: Operations about admins.
  - name: Schedules
    description: Operations about schedules.
  - name: Algorithm 1
    description: inputs to algorithm 1 python library
  - name: Login
    description: Login operations.
servers:
  - url: https://{tenant}/api/v1
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: https://example.com/api/v1
paths:
  /professors:
    get:
      tags:
        - Professors
      summary: GET /professors
      description: Get list of professors and their UUIDs.
      operationId: getProfessors
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayProfessors'
        '404':
          description: Not Found
    post:
      tags:
        - Professors
      summary: POST /professors
      description: |
        Adds a new professor to the database
      operationId: postProfessor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfessorNoID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: UUID of professor
                example: 78c74a60-281c-45f4-9536-7d128701ddb5
        '400':
          description: error adding professor
  /professors/{id}:
    get:
      tags:
        - Professors
      summary: GET /professors/{id}
      description: Gets information for a specific professor
      operationId: getProfessor(id)
      parameters:
        - name: id
          in: path
          description: ID of professor to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        '404':
          description: professor not found
    delete:
      tags:
        - Professors
      summary: DELETE /professors/{id}
      description: Deletes a specific professor and their associated preferences
      operationId: deleteProfessor(id)
      parameters:
        - name: id
          in: path
          description: ID of professor to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                description: UUID of professor deleted
                example: Deleted prof with id 78c74a60-281c-45f4-9536-7d128701ddb5
        '404':
          description: professor not found
  /professors/preferences/times/{year}:
    get:
      tags:
        - Professors
      summary: GET /professors/preferences/times/{year}
      description: Gets a list of all professor preference entries for the year
      operationId: getProfessorPreferenceTimes(year)
      parameters:
        - name: year
          in: path
          description: the year of the preference entries
          required: true
          schema:
            type: integer
            format: positive 4 digits
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayProfessorPreferenceTimes'
        '400':
          description: Bad sql query or invalid input parameter
        '404':
          description: No entries exist for the year
  /professors/{id}/preferences/{year}:
    get:
      tags:
        - Professors
      summary: GET /professors/{id}/preferences/{year}
      description: Gets a professor preference entry by year
      operationId: getProfessorPreferenceByYear(id,year)
      parameters:
        - name: id
          in: path
          description: ID of professor
          required: true
          schema:
            type: string
            format: uuid
        - name: year
          in: path
          description: the year of the preference entry
          required: true
          schema:
            type: integer
            format: positive 4 digits
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfessorPreference'
        '400':
          description: Bad sql query or invalid input parameter
        '404':
          description: Professor has no preference entry from the specified year
  /professors/{id}/preferences:
    get:
      tags:
        - Professors
      summary: GET /professors/{id}/preferences
      description: >-
        Gets a history of a professor's preference entries ordered by time stamp
        with latest entry first
      operationId: getProfessorPreferences(id)
      parameters:
        - name: id
          in: path
          description: ID of professor
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayProfessorPreference'
        '404':
          description: Professor has no preference entry
    post:
      tags:
        - Professors
      summary: POST /professors/{id}/preferences
      description: Adds a professor's preference entry to the database
      operationId: postProfessorPreferences(id)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfessorPreferenceNoID'
      parameters:
        - name: id
          in: path
          description: ID of professor
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                description: UUID of professor's preferences
                example: 78c74a60-281c-45f4-9536-7d128701ddb5
        '400':
          description: error adding professor's preferences
  /professors/{id}/remind:
    post:
      tags:
        - Professors
      summary: POST /professors/{id}/remind/
      description: |
        Reminds a professor via email to update their preference form.
      operationId: postRemind(id)
      parameters:
        - name: id
          in: path
          description: ID of professor to remind
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '401':
          description: Reminder failed.
  /professors/preferences/{id}:
    get:
      tags:
        - Professors
      summary: GET /professors/preferences/{id}
      description: Gets a single preference entry by preference id
      operationId: getProfessorPreferencesByID(id)
      parameters:
        - name: id
          in: path
          description: ID of preference entry
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfessorPreference'
        '404':
          description: preference entry not found
    put:
      tags:
        - Professors
      summary: PUT /professors/preferences/{id}
      description: Updates a preference entry
      operationId: putProfessorPreferences(id)
      parameters:
        - name: id
          in: path
          description: ID of preference entry
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfessorPreferenceNoID'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                description: UUID of preference updated
                example: 78c74a60-281c-45f4-9536-7d128701ddb5
        '404':
          description: preference entry not found
    delete:
      tags:
        - Professors
      summary: DELETE /professors/preferences/{id}
      description: Deletes a preference entry
      operationId: deleteProfessorPreferences(id)
      parameters:
        - name: id
          in: path
          description: ID of preference entry
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                description: UUID of preferences deleted
                example: 78c74a60-281c-45f4-9536-7d128701ddb5
        '404':
          description: preference entry not found
  /courses:
    get:
      tags:
        - Courses
      summary: GET /courses
      description: Get list of courses and their UUIDs.
      operationId: getCourses
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayCourses'
        '404':
          description: Not Found
    post:
      tags:
        - Courses
      summary: POST /courses
      description: |
        Adds a new course to database
      operationId: postCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseNoID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: UUID of course
                example: 78c74a60-281c-45f4-9536-7d128701ddb5
        '400':
          description: error adding course
  /courses/{id}:
    get:
      tags:
        - Courses
      summary: GET /courses/{id}
      description: Gets information for a specific course
      operationId: getCourse(id)
      parameters:
        - name: id
          in: path
          description: ID of course to update
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '500':
          description: course not found
    put:
      tags:
        - Courses
      summary: PUT /courses/{id}
      description: Updates a specific course
      operationId: updateCourse(id)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseNoID'
      parameters:
        - name: id
          in: path
          description: ID of course to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                description: UUID of course updated
                example: 78c74a60-281c-45f4-9536-7d128701ddb5
        '500':
          description: Error updating course
    delete:
      tags:
        - Courses
      summary: DELETE /courses/{id}
      description: Deletes a specific course
      operationId: deleteCourse(id)
      parameters:
        - name: id
          in: path
          description: ID of course to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                description: UUID of course deleted
                example: 78c74a60-281c-45f4-9536-7d128701ddb5
        '404':
          description: course not found
  /admins:
    get:
      tags:
        - Admins
      summary: GET /admins
      description: Get list of admins and their UUIDs.
      operationId: getAdmins
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayAdmins'
        '404':
          description: admins not found
    post:
      tags:
        - Admins
      summary: POST /admins
      description: |
        Adds a new admin to database
      operationId: postAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminNoID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: UUID of admin
                example: 78c74a60-281c-45f4-9536-7d128701ddb5
        '400':
          description: error adding admin
  /admins/{id}:
    get:
      tags:
        - Admins
      summary: GET /admins/{id}
      description: Gets information for a specific admin
      operationId: getAdmin(id)
      parameters:
        - name: id
          in: path
          description: ID of admin to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '404':
          description: admin not found
    delete:
      tags:
        - Admins
      summary: DELETE /admins/{id}
      description: Deletes a specific admin
      operationId: deleteAdmin(id)
      parameters:
        - name: id
          in: path
          description: ID of admin to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                description: UUID of admin deleted
                example: 78c74a60-281c-45f4-9536-7d128701ddb5
        '404':
          description: admin not found
  /schedules:
    get:
      tags:
        - Schedules
      summary: GET /schedules
      description: Get list of schedules, their year semester and UUIDs.
      operationId: getSchedules
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArraySchedules'
        '404':
          description: Not Found
    post:
      tags:
        - Schedules
      summary: POST /schedules
      description: |
        Adds a new schedule to database
      operationId: postSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleNoID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: UUID of schedule
                example: 78c74a60-281c-45f4-9536-7d128701ddb5
        '400':
          description: error adding schedule
  /schedules/{id}:
    get:
      tags:
        - Schedules
      summary: GET /schedules/{id}
      description: Gets information for a specific schedule
      operationId: getSchedule(id)
      parameters:
        - name: id
          in: path
          description: ID of schedule to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          description: schedule not found
    delete:
      tags:
        - Schedules
      summary: DELETE /schedules/{id}
      description: Deletes a specific schedule
      operationId: deleteSchedule(id)
      parameters:
        - name: id
          in: path
          description: ID of schedule to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                description: UUID of schedule deleted
                example: 78c74a60-281c-45f4-9536-7d128701ddb5
        '404':
          description: schedule not found
  /schedules/company/{company_num}:
    get:
      tags:
        - Schedules
      summary: GET /schedules/company/{company_num}
      description: Generates a schedule from a specific company.
      operationId: getSchedule(company)
      parameters:
        - name: company_num
          in: path
          description: number of the company to get a schedule from
          required: true
          schema:
            type: integer
            format: 1 or 2
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          description: company not found
  /alg1:
    get:
      tags:
        - Algorithm 1
      summary: Call Algo 1 Library Function
      description: |
        Call to Algo 1 Library Function
      operationId: getScheduleFromAlgo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleInput'
      responses:
        '200':
          description: Everything worked!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleOutput'
        '400':
          description: Error creating schedule
  /login:
    post:
      tags:
        - Login
      summary: POST /login
      description: |
        Attempts to authenticate a user.
      operationId: postLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: authentication failed
components:
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.com/api/oauth/dialog
          scopes:
            read:users: read users info
            write:users: modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
  schemas:
    Professor:
      type: object
      required:
        - id
        - first_name
        - last_name
        - is_peng
        - is_teaching
        - email
        - department
      properties:
        id:
          description: uuid of professor
          type: string
          example: 61587323-6632-4dcf-bae8-2a51ed8585a0
        first_name:
          description: First name of this professor
          type: string
          example: Bill
        last_name:
          description: Last name of this professor
          type: string
          example: Bird
        is_peng:
          description: Represents if the professor a PEng
          type: boolean
          example: false
        is_teaching:
          description: Represents if the professor a teaching professor
          type: boolean
          example: true
        email:
          description: Professor's email
          type: string
          example: email@uvic.ca
        department:
          description: Professor's department
          type: string
          enum:
            - CSC
            - ECE
    ArrayProfessors:
      type: array
      items:
        $ref: '#/components/schemas/Professor'
      example:
        - id: 61587323-6632-4dcf-bae8-2a51ed8585a0
          first_name: Bill
          last_name: Bird
          is_peng: false
          is_teaching: true
          email: email@uvic.ca
          department: CSC
        - id: 61587323-6632-4dcf-bae8-2a51ed8585a1
          first_name: Celina
          last_name: Berg
          is_peng: false
          is_teaching: true
          email: email@uvic.ca
          department: CSC
    ProfessorNoID:
      type: object
      required:
        - first_name
        - last_name
        - is_peng
        - is_teaching
        - email
        - department
      properties:
        first_name:
          description: First name of this professor
          type: string
          example: Bill
        last_name:
          description: Last name of this professor
          type: string
          example: Bird
        is_peng:
          description: Represents if the professor a PEng
          type: boolean
          example: false
        is_teaching:
          description: Represents if the professor a teaching professor
          type: boolean
          example: true
        email:
          description: Professor's email
          type: string
          example: email@uvic.ca
        department:
          description: Professor's department
          type: string
          enum:
            - CSC
            - ECE
    ProfessorPreferenceTimes:
      type: object
      required:
        - prof_id
        - pref_id
        - first_name
        - last_name
        - time_stamp
      properties:
        prof_id:
          description: uuid of professor
          type: string
          example: 61587323-6632-4dcf-bae8-2a51ed8585a0
        pref_id:
          description: uuid of preference entry
          type: string
          example: 98277323-6632-4dcf-bae8-2a51ed8626b8
        first_name:
          description: professor's first name
          type: string
          example: Bill
        last_name:
          description: professor's last name
          type: string
          example: Bird
        time_stamp:
          description: Time of preference entry
          type: string
          pattern: >-
            ^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])(?:(
            [0-2][0-9]):([0-5][0-9]):([0-5][0-9]))?$
          example: '2022-06-21 09:30:26'
    ArrayProfessorPreferenceTimes:
      type: array
      items:
        $ref: '#/components/schemas/ProfessorPreferenceTimes'
      example:
        - prof_id: 61587323-6632-4dcf-bae8-2a51ed8585a0
          pref_id: 98277323-6632-4dcf-bae8-2a51ed8626b8
          first_name: Rich
          last_name: Little
          time_stamp: '2022-06-25 10:34:06'
        - prof_id: 2c883081-06ed-11ed-b074-0242ac120002
          pref_id: 155bd100-06ed-11ed-b074-0242ac120002
          first_name: Dan
          last_name: Mai
          time_stamp: '2022-06-21 09:30:26'
    PreferredTime:
      type: object
      required:
        - times
        - preferredDay
      properties:
        times:
          description: Array of time ranges stored as tuples
          type: array
          example:
            - (“12:00” “13:20”) (“14:00” “15:20”)
        preferredDay:
          description: Does prof prefer to teach on this day of the week
          type: boolean
          example: true
    AvailabilityDict:
      type: object
      required:
        - mon
        - tues
        - wed
        - thurs
        - fri
      properties:
        mon:
          description: JSON object of preferred time range for the day
          type: object
          $ref: '#/components/schemas/PreferredTime'
        tues:
          description: JSON object of preferred time range for the day
          type: object
          $ref: '#/components/schemas/PreferredTime'
        wed:
          description: JSON object of preferred time range for the day
          type: object
          $ref: '#/components/schemas/PreferredTime'
        thurs:
          description: JSON object of preferred time range for the day
          type: object
          $ref: '#/components/schemas/PreferredTime'
        fri:
          description: JSON object of preferred time range for the day
          type: object
          $ref: '#/components/schemas/PreferredTime'
    PreferredTimes:
      type: object
      properties:
        fall:
          description: JSON object of preferred days and times from Mon-Fri
          type: object
          $ref: '#/components/schemas/AvailabilityDict'
        spring:
          description: JSON object of preferred days and times from Mon-Fri
          type: object
          $ref: '#/components/schemas/AvailabilityDict'
        summer:
          description: JSON object of preferred days and times from Mon-Fri
          type: object
          $ref: '#/components/schemas/AvailabilityDict'
    CoursePreference:
      type: array
      items:
        required:
          - course_id
          - will_to_teach
          - able_to_teach
        properties:
          course_id:
            description: uuid of the course
            type: string
            example: 61587323-6632-4dcf-bae8-2a51ed8585a0
          will_to_teach:
            description: Professor's willingness to teach the course
            type: string
            enum:
              - VERY_WILLING
              - WILLING
              - UNWILLING
              - 'NO'
            example: VERY_WILLING
          able_to_teach:
            description: Professors ability to teach the course
            type: string
            enum:
              - ABLE
              - WITH_EFFORT
              - 'NO'
            example: ABLE
    ProfessorPreference:
      type: object
      required:
        - id
        - time_stamp
        - year
        - semester_off
        - num_relief
        - num_fall_courses
        - num_spring_courses
        - num_summer_courses
        - preferred_times
        - course_preferences
      properties:
        id:
          description: uuid of preferences
          type: string
          example: 61587323-6632-4dcf-bae8-2a51ed8585a0
        time_stamp:
          description: Time of preference entry
          type: string
          pattern: >-
            ^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])(?:(
            [0-2][0-9]):([0-5][0-9]):([0-5][0-9]))?$
          example: '2022-06-21 09:30:26'
        year:
          description: Year of the preferences
          type: integer
          example: 2022
        semester_off:
          type: integer
          description: |
            The professor's official non teaching semester  

            | Value | Description |
            |---|---------------|
            | 0 | No semester off |
            | 1 | Fall semester off |
            | 2 | Spring semester off |
            | 3 | Summer semester off |
          minimum: 0
          maximum: 1
          example: 3
        num_relief:
          description: How many reliefs this professor has
          type: integer
          example: 2
        num_summer_courses:
          description: How many classes this professor would like to teach in the summer
          type: integer
          example: 1
        num_fall_courses:
          description: How many classes this professor would like to teach in the fall
          type: integer
          example: 2
        num_spring_courses:
          description: How many classes this professor would like to teach in the spring
          type: integer
          example: 1
        why_relief:
          description: The reasons this professor has relief
          type: string
          example: program advisor & TA manager
        preferred_times:
          description: This professor's preferred time slots
          type: object
          $ref: '#/components/schemas/PreferredTimes'
        course_preferences:
          description: This professor's course preferences
          type: array
          $ref: '#/components/schemas/CoursePreference'
    ArrayProfessorPreference:
      type: array
      items:
        $ref: '#/components/schemas/ProfessorPreference'
      example:
        - id: 61587323-6632-4dcf-bae8-2a51ed8585a0
          time_stamp: '2022-06-21 09:30:26'
          year: 2022
          semester_off: 3
          num_relief: 2
          num_summer_courses: 1
          num_fall_courses: 2
          num_spring_courses: 1
          why_relief: program advisor & TA manager
          preferred_times:
            fall:
              mon:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              tues:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              wed:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              thurs:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              fri:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
            spring:
              mon:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              tues:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              wed:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              thurs:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              fri:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
            summer:
              mon:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              tues:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              wed:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              thurs:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              fri:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
          course_preferences:
            - course_id: 61587323-6632-4dcf-bae8-2a51ed8585a0
              will_to_teach: VERY_WILLING
              able_to_teach: ABLE
        - id: 61587323-6632-4dcf-bae8-2a51ed8585a0
          time_stamp: '2021-06-21 09:30:26'
          year: 2021
          semester_off: 3
          num_relief: 2
          num_summer_courses: 1
          num_fall_courses: 2
          num_spring_courses: 1
          why_relief: program advisor & TA manager
          preferred_times:
            fall:
              mon:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              tues:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              wed:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              thurs:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              fri:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
            spring:
              mon:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              tues:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              wed:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              thurs:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              fri:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
            summer:
              mon:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              tues:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              wed:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              thurs:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
              fri:
                times:
                  - (“12:00” “13:20”) (“14:00” “15:20”)
                preferredDay: true
          course_preferences:
            - course_id: 61587323-6632-4dcf-bae8-2a51ed8585a0
              will_to_teach: VERY_WILLING
              able_to_teach: ABLE
    ProfessorPreferenceNoID:
      type: object
      required:
        - year
        - semester_off
        - num_relief
        - num_fall_courses
        - num_spring_courses
        - num_summer_courses
        - preferred_times
        - course_preferences
      properties:
        year:
          description: Year of the preferences
          type: integer
          example: 2022
        semester_off:
          type: integer
          description: |
            The professor's official non teaching semester  

            | Value | Description |
            |---|---------------|
            | 0 | No semester off |
            | 1 | Fall semester off |
            | 2 | Spring semester off |
            | 3 | Summer semester off |
          minimum: 0
          maximum: 1
          example: 3
        num_relief:
          description: How many reliefs this professor has
          type: integer
          example: 2
        num_summer_courses:
          description: How many classes this professor would like to teach in the summer
          type: integer
          example: 1
        num_fall_courses:
          description: How many classes this professor would like to teach in the fall
          type: integer
          example: 2
        num_spring_courses:
          description: How many classes this professor would like to teach in the spring
          type: integer
          example: 1
        why_relief:
          description: the reasons this professor has relief
          type: string
          example: program advisor & TA manager
        preferred_times:
          description: This professor's preferred time slots example
          type: object
          $ref: '#/components/schemas/PreferredTimes'
        course_preferences:
          description: This professor's course preferences
          type: array
          $ref: '#/components/schemas/CoursePreference'
    Course:
      type: object
      required:
        - id
        - course_code
        - course_name
        - min_offering
        - spring_req
        - summer_req
        - fall_req
        - spring_peng_req
        - summer_peng_req
        - fall_peng_req
        - course_desc
        - prof_prereq
        - year_req
      properties:
        id:
          description: uuid of course
          type: string
          example: 61587323-6632-4dcf-bae8-2a51ed8585a0
        course_code:
          description: course code of the course
          type: string
          example: CSC111
        course_name:
          description: name of course
          type: string
          example: Fundamentals of Progrogramming I with Engineering Applications
        min_offering:
          description: minimum number of times a year this course should be offered
          type: integer
          example: 2
        spring_req:
          description: is this course required to run in the spring?
          type: boolean
          example: false
        summer_req:
          description: is this course required to run in the summer?
          type: boolean
          example: true
        fall_req:
          description: is this course required to run in the fall?
          type: boolean
          example: true
        spring_peng_req:
          description: is this course required to be taught by a PEng in the spring?
          type: boolean
          example: false
        summer_peng_req:
          description: is this course required to be taught by a PEng in the summer?
          type: boolean
          example: true
        fall_peng_req:
          description: is this course required to be taught by a PEng in the fall?
          type: boolean
          example: false
        course_desc:
          description: A description of this course.
          type: string
          example: >-
            CSC 111 is an introduction to computational problem solving and
            computer programming, with a particular emphasis on applications to
            engineering problems. This course teaches programming using the C
            language, which is needed by many engineering disciplines, but the
            programming skills taught in this course are language-agnostic and
            can be applied to other programming languages as well.
        prof_prereq:
          description: >-
            A list of qualifications a prof who wants to teach this course
            should have.
          type: string
          example: Knowledge of the C programming language.
        year_req:
          description: >-
            The year of study a student is intended to take the course. For
            example, a course in term 3B would be represented as 3.
          type: integer
          example: 3
    ArrayCourses:
      type: array
      items:
        $ref: '#/components/schemas/Course'
    CourseNoID:
      type: object
      required:
        - course_code
        - course_name
        - min_offering
        - spring_req
        - summer_req
        - fall_req
        - spring_peng_req
        - summer_peng_req
        - fall_peng_req
        - course_desc
        - prof_prereq
      properties:
        course_code:
          description: course code of the course
          type: string
          example: CSC111
        course_name:
          description: name of course
          type: string
          example: Fundamentals of Progrogramming I with Engineering Applications
        min_offering:
          description: minimum number of times a year this course should be offered
          type: integer
          example: 2
        spring_req:
          description: is this course required to run in the spring?
          type: boolean
          example: false
        summer_req:
          description: is this course required to run in the summer?
          type: boolean
          example: true
        fall_req:
          description: is this course required to run in the fall?
          type: boolean
          example: true
        spring_peng_req:
          description: is this course required to be taught by a PEng in the spring?
          type: boolean
          example: false
        summer_peng_req:
          description: is this course required to be taught by a PEng in the summer?
          type: boolean
          example: true
        fall_peng_req:
          description: is this course required to be taught by a PEng in the fall?
          type: boolean
          example: false
        course_desc:
          description: A description of this course.
          type: string
          example: >-
            CSC 111 is an introduction to computational problem solving and
            computer programming, with a particular emphasis on applications to
            engineering problems. This course teaches programming using the C
            language, which is needed by many engineering disciplines, but the
            programming skills taught in this course are language-agnostic and
            can be applied to other programming languages as well.
        prof_prereq:
          description: >-
            A list of qualifications a prof who wants to teach this course
            should have.
          type: string
          example: Knowledge of the C programming language.
        year_req:
          description: >-
            The year of study a student is intended to take the course. For
            example, a course in term 3B would be represented as 3.
          type: integer
          example: 3
    Admin:
      type: object
      required:
        - id
        - first_name
        - last_name
        - email
        - is_prof
      properties:
        id:
          description: uuid of admin
          type: string
          example: 61587323-6632-4dcf-bae8-2a51ed8585a0
        first_name:
          description: First name of admin
          type: string
          example: Rich
        last_name:
          description: Last name of admin
          type: string
          example: Little
        email:
          description: Email of the admin
          type: string
          example: richlittle@uvic.ca
        is_prof:
          description: is this admin also a prof?
          type: boolean
          example: true
    ArrayAdmins:
      type: array
      items:
        $ref: '#/components/schemas/Admin'
      example:
        - id: 61587323-6632-4dcf-bae8-2a51ed8585a0
          first_name: Rich
          last_name: Little
          email: richlittle@uvic.ca
          is_prof: true
        - id: 61587323-6632-4dcf-bae8-2a51ed8585a0
          first_name: Dan
          last_name: Mai
          email: danmai@uvic.ca
          is_prof: false
    AdminNoID:
      type: object
      required:
        - first_name
        - last_name
        - email
        - is_prof
      properties:
        first_name:
          description: First name of admin
          type: string
          example: Rich
        last_name:
          description: Last name of admin
          type: string
          example: Little
        email:
          description: Email of the admin
          type: string
          example: richlittle@uvic.ca
        is_prof:
          description: is this admin also a prof?
          type: boolean
          example: true
    AlgCourse:
      type: object
      properties:
        code:
          description: Alphanumeric string uniquely identifying the course.
          type: string
          example: CSC225
        title:
          description: Title of the course
          type: string
          example: Algorithms and Data Structures I
        pengRequired:
          description: >-
            A flag indicating whether the course must be taught by an professor
            with a P.Eng certification.
          type: object
          example:
            fall: true
            spring: true
            summer: false
    CourseEnthusiasm:
      type: object
      required:
        - courseCode
        - enthusiasmScore
      properties:
        courseCode:
          description: course code
          type: string
          example: CSC111
        enthusiasmScore:
          description: enthusiasm score
          type: integer
          maximum: 180
          minimum: 0
          example: 40
    ArrayCoursePreference:
      type: array
      items:
        $ref: '#/components/schemas/CourseEnthusiasm'
      example:
        - courseCode: CSC111
          enthusiasmScore: 40
        - courseCode: CSC115
          enthusiasmScore: 120
        - courseCode: CSC230
          enthusiasmScore: 180
    AlgProfessor:
      type: object
      required:
        - id
        - name
        - isPeng
        - facultyType
        - coursePreferences
        - teachingObligations
        - preferredTimes
        - preferredCoursesPerSemester
        - preferredNonTeachingSemester
        - preferredCourseDaySpreads
      properties:
        id:
          description: uuid of professor
          type: string
          example: 61587323-6632-4dcf-bae8-2a51ed8585a0
        name:
          description: Name of the professor
          type: string
          example: Celina Berg
        isPeng:
          description: True if the professor has their P.Eng certification.
          type: boolean
          example: false
        facultyType:
          description: >-
            An enum indicating whether the professor is research faculty or
            teaching faculty.
          type: string
          enum:
            - TEACHING
            - RESEARCH
        coursePreferences:
          description: >-
            Contains a list of course codes corresponding to the courses the
            professor is qualified to teach.
          $ref: '#/components/schemas/ArrayCoursePreference'
        teachingObligations:
          description: The number of courses a professor must teach in the years.
          type: integer
          minimum: 0
          maximum: 6
          example: 3
        preferredTimes:
          description: Contains the professor’s preferred times per semester.
          type: object
          $ref: '#/components/schemas/PreferredTimes'
        preferredCoursesPerSemester:
          description: The number of courses a professor would like to teach each semester.
          type: object
          example:
            fall: 1
            spring: 2
            summer: 0
        preferredNonTeachingSemester:
          description: An enum indicating the professor’s preferred non-teaching semester.
          type: string
          enum:
            - FALL
            - SPRING
            - SUMMER
        preferredCourseDaySpreads:
          description: professor's preferred allocation of lecture hours
          type: array
          example:
            - TWF
            - W
    CourseSection:
      type: object
      properties:
        professor:
          $ref: '#/components/schemas/AlgProfessor'
        capacity:
          description: The capacity (number of students) of the course offering.
          type: integer
          example: 80
        timeSlots:
          description: >-
            The time ranges of the lectures for the course section. Undefined in
            alg 1 input and alg 2 output.
          type: array
          example:
            - MONDAY:
                '12:00': null
                '13:20': null
            - THURSDAY:
                '12:00': null
                '13:20': null
    CourseOffering:
      type: object
      properties:
        course:
          description: The course being offered
          $ref: '#/components/schemas/AlgCourse'
        sections:
          description: The sections being offered
          type: array
          items:
            $ref: '#/components/schemas/CourseSection'
    AlgSchedule:
      type: object
      properties:
        fall:
          description: A list of courses to be scheduled in the Fall semester.
          type: array
          items:
            $ref: '#/components/schemas/CourseOffering'
        spring:
          description: A list of courses to be scheduled in the Spring semester.
          type: array
          items:
            $ref: '#/components/schemas/CourseOffering'
        summer:
          description: A list of courses to be scheduled in the Summer semester.
          type: array
          items:
            $ref: '#/components/schemas/CourseOffering'
    Schedule:
      type: object
      required:
        - id
        - first_name
        - last_name
        - email
        - is_prof
      properties:
        id:
          description: uuid of schedule
          type: string
          example: 61587323-6632-4dcf-bae8-2a51ed8585a0
        year:
          description: Year of schedule
          type: integer
          example: 2022
        schedule:
          description: The schedule for the year.
          $ref: '#/components/schemas/AlgSchedule'
    ArraySchedules:
      type: array
      items:
        $ref: '#/components/schemas/Schedule'
    ScheduleNoID:
      type: object
      required:
        - year
        - schedule
      properties:
        year:
          description: Year of schedule
          type: integer
          example: 2022
        schedule:
          description: The schedule for the year.
          $ref: '#/components/schemas/AlgSchedule'
    ScheduleInput:
      type: object
      properties:
        historicalData:
          description: Historical Data
          $ref: '#/components/schemas/AlgSchedule'
        professors:
          description: Array of professors
          type: array
          items:
            $ref: '#/components/schemas/AlgProfessor'
        schedule:
          description: An empty schedule
          $ref: '#/components/schemas/AlgSchedule'
    ScheduleOutput:
      type: object
      properties:
        schedule:
          description: >-
            Contains the best schedule found, or null if none were found or
            there was an error.
          $ref: '#/components/schemas/AlgSchedule'
        error:
          description: >-
            If a schedule could not be found or there was some error, this will
            have an error code
          type: string
    LoginInput:
      type: object
      required:
        - username
        - password
      properties:
        username:
          description: netlink id of the user trying to sign in
          type: string
          example: admin
        password:
          description: the password of the user
          type: string
          example: password
    LoginResponse:
      type: object
      required:
        - id
        - permissions
      properties:
        id:
          description: uuid of user being logged in
          type: string
          example: 61587323-6632-4dcf-bae8-2a51ed8585a0
        permissions:
          description: Permissions of the user. Either 'admin' or 'professor'.
          type: string
          example: admin
